{"version":3,"sources":["components/jokeComponents/jokeCategory/JokeCategory.js","redux/jokes/jokes.types.js","axios.config.js","redux/jokes/jokes.actions.js","components/jokeComponents/jokeCategories/JokesCategories.js","components/customInput/CustomInput.js","components/searchBar/SearchBar.js","components/jokeComponents/joke/Joke.js","images/chuck_norris.png","components/jokeContainers/jokeWrap/JokeWrap.js","components/jokeContainers/jokeContainer/JokesContainer.js","App.js","redux/jokes/jokes.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["JokeCategory","category","allowExplicit","dispatchUrl","getSelectedCategory","selected","Button","disabled","onClick","handleClick","variant","color","JokesActionTypes","instance","axios","create","baseURL","fetchCategoriesAsync","dispatch","get","then","response","categories","data","type","payload","fetchCategories","setLoading","fetchJoke","joke","fetchJokeAsync","url","catch","err","console","log","searchJokeAsync","query","total","random","Math","floor","result","useStyles","makeStyles","theme","switchControl","padding","spacing","palette","text","secondary","JokesCategories","classes","useDispatch","useState","setAllowExplicit","selectedCategory","setSelectedCategory","useSelector","state","jokes","useEffect","fetchUrl","FormControlLabel","className","control","Switch","checked","onChange","name","label","Grid","container","justify","map","input","transition","transitions","width","CustomInput","placeholder","value","handleChange","Input","searchform","margin","marginLeft","SearchBar","setQuery","onSubmit","e","preventDefault","trim","length","alert","target","IconButton","aria-label","categoryCaption","position","left","bottom","fontStyle","Joke","jokeContent","jokeCategory","Container","Typography","jokeWrapper","paper","minHeight","textOverflow","contentPadding","chuckImgStyle","marginBottom","button","top","right","JokeWrap","searchQuery","isLoaded","src","ChuckImg","alt","Paper","Fade","in","timeout","direction","createMuiTheme","primary","main","root","paddingTop","title2","JokeContainer","loadHomepage","setLoadHomepage","setTimeout","ThemeProvider","maxWidth","App","INIT_STATE","jokesReducer","action","rootReducer","combineReducers","middlewares","thunk","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.258536fd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// mui\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nconst JokeCategory = ({\r\n  category,\r\n  allowExplicit,\r\n  dispatchUrl,\r\n  getSelectedCategory,\r\n  selected,\r\n}) => {\r\n  \r\n  // toogling categories\r\n  const handleClick = category => {\r\n    if (selected) {\r\n      getSelectedCategory(\"\");\r\n      dispatchUrl(\"\");\r\n    } else {\r\n      getSelectedCategory(category);\r\n      dispatchUrl(`?category=${category}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      disabled={(category === \"explicit\") & !allowExplicit ? true : false}\r\n      onClick={() => handleClick(category)}\r\n      variant={selected ? \"outlined\" : \"text\"}\r\n      color={category === \"explicit\" ? \"secondary\" : \"primary\"}>\r\n      {category}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default JokeCategory;\r\n","export const JokesActionTypes = {\r\n  GET_FETCH_URL: 'GET_FETCH_URL',\r\n  FETCH_JOKE : 'FETCH_JOKE',\r\n  FETCH_CATEGORIES : 'FETCH_CATEGORIES',\r\n  GET_SEARCH_QUERY: 'GET_SEARCH_QUERY',\r\n  IS_LOADED: 'IS_LOADED'\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.chucknorris.io/jokes/\",\r\n});\r\n\r\nexport default instance;\r\n","import {JokesActionTypes} from \"./jokes.types\";\r\n\r\nimport axios from \"../../axios.config\";\r\n\r\n\r\n// joke categories actions\r\nconst fetchCategories = categories => {\r\n  return {\r\n    type: JokesActionTypes.FETCH_CATEGORIES,\r\n    payload: categories,\r\n  };\r\n};\r\n\r\nexport const fetchCategoriesAsync = () => {\r\n  return dispatch => {\r\n    axios.get(\"categories\").then(response => {\r\n      const categories = response.data;\r\n      dispatch(fetchCategories(categories));\r\n    });\r\n  };\r\n};\r\n\r\n\r\n// joke actions\r\nconst setLoading = () => {\r\n  return {\r\n    type: JokesActionTypes.IS_LOADED,\r\n  };\r\n};\r\n\r\nexport const getFetchUrl = fetchUrl => {\r\n  return {\r\n    type: JokesActionTypes.GET_FETCH_URL,\r\n    payload: fetchUrl,\r\n  };\r\n};\r\n\r\nconst fetchJoke = joke => {\r\n  return {\r\n    type: JokesActionTypes.FETCH_JOKE,\r\n    payload: joke,\r\n  };\r\n};\r\n\r\nexport const fetchJokeAsync = url => {\r\n  return dispatch => {\r\n    dispatch(setLoading());\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        const joke = response.data;\r\n        dispatch(fetchJoke(joke));\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n};\r\n\r\n\r\n// search joke actions\r\nexport const getSearchQuery = searchQuery => {\r\n  return {\r\n    type: JokesActionTypes.GET_SEARCH_QUERY,\r\n    payload: searchQuery,\r\n  };\r\n};\r\n\r\nexport const searchJokeAsync = query => {\r\n  return dispatch => {\r\n    dispatch(setLoading());\r\n    axios\r\n      .get(`search?query=${query}`)\r\n      .then(response => {\r\n        const total = response.data.total;\r\n        const random = Math.floor(Math.random() * total);\r\n        const joke = response.data.result[random];\r\n        dispatch(getSearchQuery(query));\r\n        dispatch(fetchJoke(joke));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n};\r\n","import React, {Fragment, useEffect, useState} from \"react\";\r\nimport JokeCategory from \"../jokeCategory/JokeCategory\";\r\n\r\n// redux\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchCategoriesAsync, getFetchUrl} from \"../../../redux/jokes/jokes.actions\";\r\n\r\n// mui\r\nimport {Grid, Switch, FormControlLabel} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  switchControl: {\r\n    padding: theme.spacing(3),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nconst JokesCategories = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [allowExplicit, setAllowExplicit] = useState(false);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n\r\n  // take data from redux\r\n  const categories = useSelector(state => state.jokes.categories);\r\n\r\n  // fetch categories\r\n  useEffect(() => {\r\n    dispatch(fetchCategoriesAsync());\r\n  }, [dispatch]);\r\n\r\n  // change url in redux for api call\r\n  const dispatchUrl = url => {\r\n    dispatch(getFetchUrl(`random${url}`));\r\n  };\r\n\r\n  // switch logic to allow explicit jokes\r\n  const handleChange = () => {\r\n    setAllowExplicit(!allowExplicit);\r\n\r\n    // when switched to false, change fetchUrl to random and remove selected\r\n    if (allowExplicit === true && selectedCategory === \"explicit\") {\r\n      dispatchUrl(\"\");\r\n      setSelectedCategory(\"\");\r\n    }\r\n  };\r\n\r\n  const getSelectedCategory = category => {\r\n    setSelectedCategory(category);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <FormControlLabel\r\n        className={classes.switchControl}\r\n        control={\r\n          <Switch checked={allowExplicit} onChange={handleChange} name=\"allowExplicit\" />\r\n        }\r\n        label=\"Allow explicit category\"\r\n      />\r\n\r\n      <Grid container justify=\"center\">\r\n        {categories.map(category => (\r\n          <JokeCategory\r\n            key={category}\r\n            category={category}\r\n            selected={selectedCategory === category}\r\n            dispatchUrl={dispatchUrl}\r\n            allowExplicit={allowExplicit}\r\n            getSelectedCategory={getSelectedCategory}\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default JokesCategories;\r\n","import React from 'react'\r\n\r\n// mui\r\nimport {Input} from \"@material-ui/core/\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  input: {\r\n    padding: theme.spacing(1),\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"18ch\",\r\n    \"&:focus\": {\r\n      width: \"20ch\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CustomInput = ({placeholder, value, handleChange}) => {\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Input\r\n        value={value}\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n        classes={{\r\n          input: classes.input,\r\n        }}\r\n      />\r\n  )\r\n}\r\n\r\nexport default CustomInput\r\n","import React, {useState} from \"react\";\r\n\r\n// mui\r\nimport {IconButton} from \"@material-ui/core/\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\n// redux\r\nimport {useDispatch} from \"react-redux\";\r\nimport {searchJokeAsync} from \"../../redux/jokes/jokes.actions\";\r\nimport CustomInput from \"../customInput/CustomInput\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  searchform: {\r\n    margin: theme.spacing(3),\r\n    marginLeft: \"70px\",\r\n  },\r\n}));\r\n\r\nconst SearchBar = ({type, placeholder}) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    // logic for search joke search\r\n    if (type === \"joke-search\") {\r\n      if (query.trim().length >= 3) {\r\n        dispatch(searchJokeAsync(query));\r\n        setQuery(\"\");\r\n      } else {\r\n        alert(\"Please write longer query, minimum are 3 characters...\");\r\n      }\r\n    } else return;\r\n  };\r\n\r\n  const handleChange = e => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={classes.searchform}>\r\n      <CustomInput placeholder={placeholder} handleChange={handleChange} value={query} />\r\n\r\n      <IconButton aria-label=\"search\" type=\"submit\">\r\n        <SearchIcon />\r\n      </IconButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\n// mui\r\nimport {Container, Typography} from \"@material-ui/core/\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  categoryCaption: {\r\n    position: \"absolute\",\r\n    left: theme.spacing(1),\r\n    bottom: theme.spacing(1),\r\n    fontStyle: \"italic\",\r\n  },\r\n}));\r\n\r\nconst Joke = ({jokeContent, jokeCategory='random'}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container>\r\n      {/* joke content */}\r\n      <Typography variant=\"subtitle1\">\r\n        {jokeContent}\r\n      </Typography>\r\n\r\n      {/* joke category */}\r\n      <Typography variant=\"caption\" className={classes.categoryCaption}>\r\n      <span>\"{jokeCategory}\"</span>\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Joke;\r\n","export default __webpack_public_path__ + \"static/media/chuck_norris.506b744f.png\";","import React, {useEffect, Fragment} from \"react\";\r\nimport Joke from \"../../jokeComponents/joke/Joke\";\r\nimport ChuckImg from \"../../../images/chuck_norris.png\";\r\n\r\n// redux\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchJokeAsync} from \"../../../redux/jokes/jokes.actions\";\r\n\r\n// mui\r\nimport {Container, Paper, Fade, IconButton} from \"@material-ui/core/\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  jokeWrapper: {\r\n    position: \"relative\",\r\n  },\r\n  paper: {\r\n    padding: (theme.spacing(2), theme.spacing(3)),\r\n    color: theme.palette.text.secondary,\r\n    minHeight: \"2.5em\",\r\n    textOverflow: \"ellipsis\",\r\n  },\r\n  contentPadding: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  chuckImgStyle: {\r\n    width: \"250px\",\r\n    marginBottom: \"-45px\",\r\n    position: \"relative\",\r\n  },\r\n  button: {\r\n    position: \"absolute\",\r\n    top: 222,\r\n    right: 2,\r\n  },\r\n}));\r\n\r\nconst JokeWrap = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const searchQuery = useSelector(state => state.jokes.searchQuery);\r\n  const fetchUrl = useSelector(state => state.jokes.fetchUrl);\r\n  const isLoaded = useSelector(state => state.jokes.isLoaded);\r\n  const joke = useSelector(state => state.jokes.joke);\r\n\r\n  /**\r\n   * random joke vs search joke logic?\r\n   * response from api is different\r\n   * 1. store full object into redux and make separate components for random joke and searched joke, destructuring data inside components\r\n   *\r\n   * or\r\n   *\r\n   * 2. make separete redux actions for random and search, all logic will be inside redux, one component to render joke content.\r\n   * --------------------------------\r\n   * 1. fetch random joke\r\n   *    - useEffect, dependency is url, will only change when categories are selected\r\n   *    - dispatch api call func\r\n   *\r\n   * 2. search for joke\r\n   *    - form\r\n   *    - dispatch second api call func\r\n   */\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchJokeAsync(fetchUrl));\r\n  }, [dispatch, fetchUrl]);\r\n\r\n  return (\r\n    <Container>\r\n      <Fragment>\r\n        <div className={classes.jokeWrapper}>\r\n          <img src={ChuckImg} alt=\"chuck\" className={classes.chuckImgStyle} />\r\n          <Paper variant=\"outlined\" className={classes.paper}>\r\n            {/* if loaded show joke content */}\r\n            {isLoaded && (\r\n              <Fade in={isLoaded} timeout={500} direction=\"right\">\r\n                <div className={classes.contentPadding}>\r\n                  {/* if joke exist render component, else render message, if !search query -> show message */}\r\n                  {joke ? (\r\n                    <Joke jokeContent={joke.value} jokeCategory={joke.categories[0]} />\r\n                  ) : (\r\n                    <div>\r\n                      {searchQuery ? (\r\n                        <span>Can't find joke containing: \"{searchQuery}\"</span>\r\n                      ) : (\r\n                        <span>Can't load joke :(</span>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Fade>\r\n            )}\r\n            <IconButton\r\n              className={classes.button}\r\n              onClick={() => {\r\n                dispatch(fetchJokeAsync(fetchUrl));\r\n              }}>\r\n              <RefreshIcon color=\"secondary\" />\r\n            </IconButton>\r\n          </Paper>\r\n        </div>\r\n      </Fragment>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default JokeWrap;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nimport JokesCategories from \"../../jokeComponents/jokeCategories/JokesCategories\";\r\nimport SearchBar from \"../../searchBar/SearchBar\";\r\nimport JokeWrap from \"../jokeWrap/JokeWrap\";\r\n\r\n// mui\r\nimport {Container, Typography} from \"@material-ui/core/\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Fade} from \"@material-ui/core\";\r\nimport {ThemeProvider} from \"@material-ui/styles\";\r\nimport {createMuiTheme} from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {main: \"#2f8bd8\"},\r\n    secondary: {main: \"#cf542e\"},\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    paddingTop: theme.spacing(6),\r\n  },\r\n  title2: {\r\n    color: '#cf542e'\r\n  }\r\n}));\r\n\r\nconst JokeContainer = () => {\r\n  const classes = useStyles();\r\n  const [loadHomepage, setLoadHomepage] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setLoadHomepage(true);\r\n    }, 350);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ThemeProvider theme={theme}>\r\n        <Fade in={loadHomepage} timeout={1000}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography variant=\"h3\" color=\"primary\">\r\n              Chuck's <span className={classes.title2}>Jokes</span>\r\n            </Typography>\r\n            <JokesCategories />\r\n            <SearchBar type=\"joke-search\" placeholder=\"Search joke...\" />\r\n            <JokeWrap />\r\n          </Container>\r\n        </Fade>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JokeContainer;\r\n","import \"./App.css\";\nimport JokeContainer from \"./components/jokeContainers/jokeContainer/JokesContainer\";\n\nconst App = () => {\n  return <div className=\"App\">\n    <JokeContainer />\n  </div>;\n};\n\nexport default App;\n","import {JokesActionTypes} from \"./jokes.types\";\r\n\r\nconst INIT_STATE = {\r\n  fetchUrl: \"random\",\r\n  joke: {},\r\n  categories: [],\r\n  searchQuery: \"\",\r\n  isLoaded: false,\r\n};\r\n\r\nconst jokesReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case JokesActionTypes.IS_LOADED:\r\n      return {\r\n        ...state,\r\n        isLoaded: false,\r\n      };\r\n\r\n    case JokesActionTypes.GET_FETCH_URL:\r\n      return {\r\n        ...state,\r\n        fetchUrl: action.payload,\r\n      };\r\n\r\n    case JokesActionTypes.FETCH_JOKE:\r\n      return {\r\n        ...state,\r\n        joke: action.payload,\r\n        isLoaded: true,\r\n      };\r\n\r\n    case JokesActionTypes.FETCH_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: action.payload,\r\n      };\r\n\r\n    case JokesActionTypes.GET_SEARCH_QUERY:\r\n      return {\r\n        ...state,\r\n        searchQuery: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default jokesReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport jokesReducer from \"./jokes/jokes.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  jokes: jokesReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  middlewares.push(logger)\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// redux imports\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}